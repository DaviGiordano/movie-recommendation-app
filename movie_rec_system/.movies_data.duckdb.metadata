{"timestamp": 1698766915.420264, "stored_source_code": "# declare a list tasks whose products you want to use as inputs\nupstream = None\n\nimport requests\nfrom dotenv import load_dotenv\nimport duckdb\nimport os\ndef init_duck_db_movies(path, data):\n    conn = duckdb.connect(path, read_only=False)\n    conn.execute(\n        \"\"\"\n        CREATE TABLE IF NOT EXISTS movies(\n        genre_ids INT[],\n        id INTEGER,\n        original_language VARCHAR,\n        overview VARCHAR,\n        popularity DOUBLE,\n        release_date TIMESTAMP,\n        title VARCHAR,\n        vote_average DOUBLE,\n        vote_count INTEGER\n        );\n        \"\"\"\n    )\n\n    for movie in data['results']:\n        genre_ids_str = ','.join(map(str, movie['genre_ids']))  # Creates a string with the genre ids separated by comma\n        conn.execute(f\"\"\" INSERT INTO movies VALUES(ARRAY[{genre_ids_str}],\n            {movie[\"id\"]},\n            '{movie[\"original_language\"]}',\n            '{movie[\"overview\"].replace(\"'\", \"''\")}',\n            {movie[\"popularity\"]},\n            '{movie[\"release_date\"]}',\n            '{movie[\"title\"].replace(\"'\", \"''\")}',\n            {movie[\"vote_average\"]},\n            {movie[\"vote_count\"]});\n        \"\"\"\n        )\n    conn.close()\ndef init_duck_db_genres(path, data):\n    conn = duckdb.connect(path, read_only=False)\n    conn.execute(\n        \"\"\"\n        CREATE TABLE IF NOT EXISTS genres(\n            id INTEGER,\n            name VARCHAR\n        );\n        \"\"\"\n    )\n    for genre in data['genres']:\n        conn.execute(f\"\"\" INSERT INTO genres VALUES(\n            {genre['id']},\n            '{genre[\"name\"]}'\n        );\n    \"\"\")\n    conn.close()\n# Load API key from .env file\nload_dotenv('.env')\napi_key = os.getenv('API_KEY')\n# Construct URL\nurl_genres = f\"https://api.themoviedb.org/3/genre/movie/list?api_key={api_key}&with_original_language=en\"\nurl_movies = f\"https://api.themoviedb.org/3/discover/movie?api_key={api_key}&language=en-US&page=1&sort_by=popularity.desc\"\ntry:\n    # Request genre data\n    genre_res = requests.get(url_genres)\nexcept requests.exceptions.RequestException as e:\n    print('An error occured during the genre request:', e)\ntry:\n    # Request movie data\n    movies_res = requests.get(url_movies)\nexcept requests.exceptions.RequestException as e:\n    print('An error occured during the movie request:', e)\n# Transform content to JSON\nmovies_res = movies_res.json()\ngenre_res = genre_res.json()\n# Initialize connection with database\nduckdb_file_path = 'movies_data.duckdb'\n# Create duckdb tables and populate\ninit_duck_db_movies(duckdb_file_path, movies_res)\ninit_duck_db_genres(duckdb_file_path, genre_res)", "params": {}}